#
#                               ðŸš€
#
# Personal zsh configuration of Ari Miller <arimiller92@gmail.com>

#--------------------------------------------------------------------------
# Setup
#--------------------------------------------------------------------------

if [ -f $HOME/.env ]; then
    set -o allexport; source $HOME/.env; set +o allexport
fi

typeset -U path
path=(
    $HOME/.local/bin
    $HOME/.config/emacs/bin
    $HOME/.cargo/bin
    /opt/homebrew/bin
    ./vendor/bin
    $path
)

export DOTFILES="$HOME/Code/tam5/dotfiles"

#--------------------------------------------------------------------------
# Plugins
#--------------------------------------------------------------------------

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export EDITOR=nvim
export GIT_EDITOR=nvim
export FZF_DEFAULT_OPTS='--layout=reverse'
HYPHEN_INSENSITIVE="true"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="yyyy-mm-dd"
VI_MODE_SET_CURSOR=true
VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
zvm_after_init_commands+=(eval "$(atuin init zsh --disable-up-arrow)")

source $(brew --prefix)/share/antigen/antigen.zsh

antigen use oh-my-zsh

antigen theme romkatv/powerlevel10k

antigen bundle command-not-found
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle jeffreytse/zsh-vi-mode

antigen apply

plugins=()

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

eval "$(mise activate zsh)"

#--------------------------------------------------------------------------
# Aliases
#--------------------------------------------------------------------------

alias ls="eza --long --all --group-directories-first --time-style long-iso"
alias cat="bat --chop-long-lines --theme=Dracula --style=plain"
alias rm="echo Stop! Use rip instead!"
alias rip="rip --graveyard ~/.local/share/Trash"

alias dotfiles="cd $DOTFILES"
alias desk="cd ~/Desktop"
alias code="cd ~/Code"

alias tp="pbpaste > "

alias k="kubectl"

# Vim
alias vim="nvim"

# @DWIM
v () {
  nvim "${@:-.}";
}

# Git
alias g="git"
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gcn="git commit --no-verify"
alias gp="git push"
alias gpu="git push -u origin \$(git rev-parse --abbrev-ref HEAD)"
alias gsu="git branch --set-upstream-to=origin/\$(git rev-parse --abbrev-ref HEAD)"
alias gstash="git add . && git commit -m 'stash'"
alias gpop="git reset --soft head~1 && git reset head"
alias nah="git reset --hard head && git clean -fd"

# @DWIM
gd () {
  if [[ -n "$@" ]]; then
    git diff "$@"
    return
  fi

  # Build list: unstaged + staged + untracked
  files=$( ( \
      git diff --name-only; \
      git diff --name-only --cached; \
      git ls-files --others --exclude-standard \
    ) | sort -u )

  # Nothing to show
  [ -z "$files" ] && { echo "No changes."; return; }

  preview='bash -c '\''
    f="$1"
    if git ls-files --error-unmatch -- "$f" >/dev/null 2>&1; then
      git diff --color=always -- "$f"
      git diff --color=always --cached -- "$f"
    else
      git diff --no-index --color=always /dev/null "$f"
    fi
  '\'' _ {}'

  open_full='bash -c '\''
    f="$1"
    if git ls-files --error-unmatch -- "$f" >/dev/null 2>&1; then
      { git diff --color=always -- "$f"; git diff --color=always --cached -- "$f"; } | less -R
    else
      git diff --no-index --color=always /dev/null "$f" | less -R
    fi
  '\'' _ {}'

  echo "$files" \
    | fzf -m --ansi \
        --preview "$preview" \
        --bind "enter:execute:$open_full"
}

grho () {
    branch=$(git branch | grep \* | cut -d ' ' -f2)
    git reset --hard origin/$branch
}

# @DWIM
wip () {
  local message="wip"
  if [[ ! -z $@ ]]; then
    message="$@"
    # Check if message does not start with "wip"
    if [[ ! $message =~ ^wip ]]; then
      message="wip - $message"
    fi
  fi

  # Check if there are staged changes
  if git diff --cached --quiet; then
    # No staged changes, add everything
    git add .
  fi

  # Commit staged changes
  git commit -m "${message}" --no-verify
}

# @DWIM
gco () {
  if [[ ! -z $@ ]]; then git checkout "$@"; return; fi

  local branches branch
  branches=$(git for-each-ref --count=50 --sort=-committerdate --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo $branch | rg -o "([^/]+/)?[^/]+$")
}

_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | delta'"

glo () {
    # git log -n 10 --pretty=format:"%h - %s (%an, %ar)" -- package.json
    # if [[ ! -z $@ ]]; then git checkout "$@"; return; fi

    git log --graph --color=always --format="%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset %C(black)%d%Creset" "$@" |
        fzf --no-sort --no-mouse --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, ctrl-y to copy hash" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "ctrl-y:execute:$_gitLogLineToHash | pbcopy"
}

alias gro="glo ..@{u}"

#--------------------------------------------------------------------------
# Misc / Fixes
#--------------------------------------------------------------------------

# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish
